using Serial COM1 for debug out 
boot start
registered interupt handler for [33] at 0xffffffff80211ca0
registered interupt handler for [32] at 0xffffffff8021191c
registered interupt handler for [105] at 0xffffffff8020d6a0
==init GDT, TSS==
gdt ptr = 0xffffffff80215000, tss ptr = 0xffffffff80215028 tss - gdt = 0x28
stack top = 0xffffffff8021e000 end = 0xffffffff8021a000 size = 0x4000
copied GDT tss to 0xffffffff80218c70
==Reloaded GDT, Loaded TSS==
interupts initialized
==boot initial phase complete==

CPUID available = YES
==Parsing Multiboot2 Header==
Unhandled Multiboot Tag: 10
Found Multiboot Module at 0x22c000. Total: 1
Unhandled Multiboot Tag: 9
Unhandled Multiboot Tag: 5
found VBE
fb @ 0xfc000000 h= 768 p= 4096 
===MULTIBOOT_TAG_TYPE_ACPI_OLD===
==parsed mb2 header==
boot info: BIOS [GRUB 2.12] cmdline='dbg=1 serial=1 hackz=1337' kernel_base=0x200000

==PMM Init==
Available Memory Region [0]:{ @0x0 - 0x9fc00 } size 0x9fc00 [0 MiB] 
Available Memory Region [3]:{ @0x100000 - 0xbffe0000 } size 0xbfee0000 [3070 MiB] 
Available Memory Region [7]:{ @0x100000000 - 0x240000000 } size 0x140000000 [5120 MiB] 
Total Memory:
    8388095 KiB  /  8191 MiB  /  7 GiB
 Total Pages: 4095 

for region 0x100000 - 0xbffe0000 there are 1535 pages (r 896 kb) to set free
aligned start 0x200000 - aligned end 0xbfe00000 (1 1) 
for region 0x100000000 - 0x240000000 there are 2560 pages (r 0 kb) to set free
marking from kernel phys start 0x200000 to kernel phys end 0x22c000 as used
mark region used: 0x200000 - 0x22c000
marking from 0x200000 - 0x400000 as used, total pages = 1
mark region used: 0x0 - 0xe2c000
marking from 0x0 - 0xe58000 as used, total pages = 7
==PMM End==
mark region used: 0x22c000 - 0x1710af9
marking from 0x200000 - 0x17c95f2 as used, total pages = 10
==init paging==
mark region used: 0xfc000000 - 0xfc300000
marking from 0xfc000000 - 0xfc400000 as used, total pages = 2
unmapping initial identity
palloc_init()
pmm_kalloc(0x400000): found space for 2 pages at 0x1600000
map_phys_addr():  0x1600000 -> 0xffffffff81600000 | 2 pages 
idx for VA: 0xffffffff81600000 [0b1111 1111 1111 1111 1111 1111 1111 1111 1000 0001 0110 0000 0000 0000 0000 0000 ] 
 p4[511] p3[510] p2[11] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x224000
initial p3 = 0xffffffff80224000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff80224000 p2 = 0x223000 
making p3 virtual: now 0xffffffff80224000 
making p2 virtual: now 0xffffffff80224000 
entry 0 @ 0xffffffff802232c0 = 0x1600083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff80223300 = 0x1800083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffffff81600000 
page allocator ready at 0xffffffff81600000
mapping framebuffer 0xfc000000 to 0xfc000000
map_phys_addr():  0xfc000000 -> 0xfc000000 | 2 pages 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[3] p2[480] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
initial p3 = 0x0 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
alloc new page table at 0x1600000, virtual 0xffffffff81600000, index now 1 
alloc new page table at 0x1601000, virtual 0xffffffff81601000, index now 2 
made new: **p3 = 0x1600000 p2 = 0x1601000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0000 0000 0000 0111  
we have: p3 = 0x1600000 p2 = 0x1601000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81608800 = 0xfc000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff81608840 = 0xfc200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0010 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0xfc000000 
init_heap()
pmm_kalloc(0x800000): found space for 4 pages at 0x1c00000
map_phys_addr():  0x1c00000 -> 0xffffbeefed000000 | 4 pages 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
 p4[381] p3[447] p2[360] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
initial p3 = 0x0 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
alloc new page table at 0x1602000, virtual 0xffffffff81602000, index now 3 
alloc new page table at 0x1603000, virtual 0xffffffff81603000, index now 4 
made new: **p3 = 0x1602000 p2 = 0x1603000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0010 0000 0000 0111  
we have: p3 = 0x1602000 p2 = 0x1603000 
making p3 virtual: now 0xffffffff81602000 
making p2 virtual: now 0xffffffff81602000 
entry 0 @ 0xffffffff81608a00 = 0x1c00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1100 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff81608a40 = 0x1e00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1110 0000 0000 0000 1000 0011 
entry 2 @ 0xffffffff81608a80 = 0x2000083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0010 0000 0000 0000 0000 1000 0011 
entry 3 @ 0xffffffff81608ac0 = 0x2200083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0010 0010 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffbeefed000000 
bmap [ 0xffffbeefed000000 ] size=0 
max size = 262130 max_size_bytes = 0x200000 
==paging init ok==
skipping acpi

==MEM INIT OK==
enabled interupts.
==boot second phase complete==
=======
ISR_Debug: 1 
===isr[0x1] err{0x0}====
err_code = 0x0
rbp = 0xffffffff8021dff0
rip = 0xffffffff80201f3b
rsp = 0xffffffff8021df40
cs = 0x8
rflags = 0x246
cr3 = 0x220000
ds = 0x10
ss = 0x10
rax = 0xa
rbx = 0x215000
rcx = 0x0
rdx = 0x31
rdi = 0xffffffff80215478
rsi = 0xa
r8 = 0xffffffff80212227
r9 = 0xffffffff8020bc4c
r10 = 0xffffffff8020bc4c
r11 = 0x0
r12 = 0x0
r13 = 0x0
r14 = 0x0
r15 = 0x0
=======
making new block at 0xffffbeefed200000 size=94 /  footer @ 0xffffbeefed200052 
adding to alloc map, prev. # allocs = 0 
 added to alloc map, new # allocs = 1 
freeing block at 0xffffbeefed200000 / block_size=81 
block freed, size of allocs = 1 
loading initial ramdisk... 
===initrd: loading 21908217 bytes from 0x22c000===
initrd validated; contains 21904260 bytes of files!
we found no space to fit size 0x14e4, making new block at 0xffffbeefed20005e size=5373 /  footer @ 0xffffbeefed20154f 
adding to alloc map, prev. # allocs = 1 
 added to alloc map, new # allocs = 2 
we found no space to fit size 0x5aa, making new block at 0xffffbeefed20155b size=1475 /  footer @ 0xffffbeefed201b12 
adding to alloc map, prev. # allocs = 2 
 added to alloc map, new # allocs = 3 
added dir node mod 
added dir node local 
added dir node libnest 
added dir node lib 
added dir node usr 
added dir node books 
added dir node etc 
added dir node birds 
added dir node bin 
added file node ulysses.txt 
added file node LICENSE.txt 
added file node initrd.txt 
added file node etcetera.txt 
added file node DOOM95.WAD 
added file node init 
added file node ls 
added file node DOOM.WAD 
added file node usermode 
added file node doomos 
added file node loco.txt 
added file node usrlocal.txt 
added file node libd.so 
added file node imaginehavingalongfilenamewellyoudonthavetoanymore.txt 
added file node greenland.bmp 
added file node birdnest.nice 
added file node testcase.txt 
==initrd load success!== 

file init is valid elf64. loading..
phdr load  vaddr = 0x400000, aligned to 0x1000, X  R  
phdr load  vaddr = 0x405000, aligned to 0x1000,  W R  
lowest vaddr 0x400000 highest vaddr 0x405a60, size 0x200000
pmm_alloc(0x400000): found space for 2 pages at 0x40000000
map_phys_addr():  0x40000000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
alloc new page table at 0x1604000, virtual 0xffffffff81604000, index now 5 
made new: p2
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0010 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
allocated user pages: [phys address] =  p4 0x403fd000 p3 0x403fe000 p2 0x403ff000
 [virt] vstart = 0x400000 vend = 0x800000, size palign 0x200000 size total 0x400000
map_user_page_tables:  0x40000000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
kp4 phys = 0x220000
kp4 virt = 0xffffffff80220000
copying kp4 at idx 511 (contents 0x224023) to user p4
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
 p4[381] p3[447] p2[360] p1[0] 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[3] p2[480] p1[0] 
usr stack @ 0x7fd000, size = 4061 kb
copying header 0x400000 to 0x400000. fs= 0x47a0 ms = 0x47a0
copying header 0x405000 to 0x405000. fs= 0x910 ms = 0xa60
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
loaded ELF: init [23136 kb]
 usr entry = 0x4000c0 usr phys = 0x40000000 usr lo 0x400000 usr rsp 0x7fd000, usr cr3 = 0x403fd000
we found no space to fit size 0x1000, making new block at 0xffffbeefed201b1e size=4121 /  footer @ 0xffffbeefed202b2b 
adding to alloc map, prev. # allocs = 3 
 added to alloc map, new # allocs = 4 

=== stdout init @ 0xffffbeefed201b2b size 4096 idx 0  ready = 1 ===
Graphics Init 1024 x 768 x 32 ready = 1 
tasking init

we found no space to fit size 0x2000, making new block at 0xffffbeefed202b37 size=8217 /  footer @ 0xffffbeefed204b44 
adding to alloc map, prev. # allocs = 4 
 added to alloc map, new # allocs = 5 
stack  0xffffbeefed204a26 isn't aligned! repairing to = 0xffffbeefed204a20 
create_task task_kmain pid 0 rip 0xffffffff80201787 !
added initial task task_kmain pid 0 !
adding task task_drawstdout, pid_last = 1 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed204b50 size=8217 /  footer @ 0xffffbeefed206b5d 
adding to alloc map, prev. # allocs = 5 
 added to alloc map, new # allocs = 6 
stack  0xffffbeefed206a3f isn't aligned! repairing to = 0xffffbeefed206a30 
create_task task_drawstdout pid 1 rip 0xffffffff8020198a !
scheduler: added task task_drawstdout, pid = 1 !
adding task task_exit_test, pid_last = 2 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed206b69 size=8217 /  footer @ 0xffffbeefed208b76 
adding to alloc map, prev. # allocs = 6 
 added to alloc map, new # allocs = 7 
stack  0xffffbeefed208a58 isn't aligned! repairing to = 0xffffbeefed208a50 
create_task task_exit_test pid 2 rip 0xffffffff80201aae !
scheduler: added task task_exit_test, pid = 2 !
adding task task_yield_test, pid_last = 3 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed208b82 size=8217 /  footer @ 0xffffbeefed20ab8f 
adding to alloc map, prev. # allocs = 7 
 added to alloc map, new # allocs = 8 
stack  0xffffbeefed20aa71 isn't aligned! repairing to = 0xffffbeefed20aa70 
create_task task_yield_test pid 3 rip 0xffffffff80201adf !
scheduler: added task task_yield_test, pid = 3 !
adding USER task usermode, pid_last = 4 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed20ab9b size=8217 /  footer @ 0xffffbeefed20cba8 
adding to alloc map, prev. # allocs = 8 
 added to alloc map, new # allocs = 9 
stack  0xffffbeefed20ca8a isn't aligned! repairing to = 0xffffbeefed20ca80 
create_task usermode pid 4 rip 0x4000c0 !
we found no space to fit size 0x70, making new block at 0xffffbeefed20cbb4 size=137 /  footer @ 0xffffbeefed20cc31 
adding to alloc map, prev. # allocs = 9 
 added to alloc map, new # allocs = 10 
scheduler: added USER task usermode, pid = 4 !
randos up 
starting first task task_kmain
starting task task_kmain
task draw timer 
task draw test 
task exit test 
task 2 exited with code: 0
found task task_drawstdout pointing to del task task_exit_test
old parent pid = 65535
yield testallocated a heap for task 4
pmm_alloc(0x400000): found space for 2 pages at 0x40600000
map_phys_addr():  0x40000000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0010 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
map_user_page_tables:  0x40600000 -> 0x800000 | 2 pages 
idx for VA: 0x800000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[4] p1[0] 
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
allocated a heap for task 4:
        pa 0x40600000 va0x800000 size 4096 kb 
 cr3 to restore: 0x403fd000 
invalidated: 0x800000 
I am a user task hard at work
please mr kernel give me cpu time

usr@os> yieldingdoomyielding 
found space at 0. need size 0x6 found size 0x51 
using existing block at 0xffffbeefed200000 / block_size=81 
exec_user_task(): old cr3 0x403fd000 new cr3 0x220000 insane 0x403fd000 wtf 0xffffbeefed200008
file doomos is valid elf64. loading..
phdr load  vaddr = 0x400000, aligned to 0x1000, X  R  
phdr load  vaddr = 0x472000, aligned to 0x1000,  W R  
lowest vaddr 0x400000 highest vaddr 0x4d68c0, size 0x200000
pmm_alloc(0x400000): found space for 2 pages at 0x40c00000
map_phys_addr():  0x40c00000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40c00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1100 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40e00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1110 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
allocated user pages: [phys address] =  p4 0x40ffd000 p3 0x40ffe000 p2 0x40fff000
 [virt] vstart = 0x400000 vend = 0x800000, size palign 0x200000 size total 0x400000
map_user_page_tables:  0x40c00000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
kp4 phys = 0x220000
kp4 virt = 0xffffffff80220000
copying kp4 at idx 511 (contents 0x224023) to user p4
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
 p4[381] p3[447] p2[360] p1[0] 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[3] p2[480] p1[0] 
usr stack @ 0x7fd000, size = 3225 kb
copying header 0x400000 to 0x400000. fs= 0x71eb0 ms = 0x71eb0
copying header 0x472000 to 0x472000. fs= 0x21f50 ms = 0x648c0
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
loaded ELF: doomos [878784 kb]
exec_user_task():
     usr entry = 0x4000c0 usr phys = 0x40c00000 usr lo 0x400000 usr rsp 0x7fd000, usr cr3 = 0x40ffd000
adding USER task doomos, child of 4 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed20cc3d size=8217 /  footer @ 0xffffbeefed20ec4a 
adding to alloc map, prev. # allocs = 10 
 added to alloc map, new # allocs = 11 
stack  0xffffbeefed20eb2c isn't aligned! repairing to = 0xffffbeefed20eb20 
create_task doomos pid 5 rip 0x4000c0 !
we found no space to fit size 0x70, making new block at 0xffffbeefed20ec56 size=137 /  footer @ 0xffffbeefed20ecd3 
adding to alloc map, prev. # allocs = 11 
 added to alloc map, new # allocs = 12 
scheduler: added child user task doomos, pid = 5 !
scheduler: swapping back cr3 to 0x403fd000
allocated a heap for task 5
pmm_alloc(0x400000): found space for 2 pages at 0x41200000
map_phys_addr():  0x40c00000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40c00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1100 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40e00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1110 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
map_user_page_tables:  0x41200000 -> 0x800000 | 2 pages 
idx for VA: 0x800000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[4] p1[0] 
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
allocated a heap for task 5:
        pa 0x41200000 va0x800000 size 4096 kb 
 cr3 to restore: 0x40ffd000 
invalidated: 0x800000 
starting doomos!
created frame buffer 0
mmap WAD

 task_mmap_file(): DOOM.WAD to be mmaped in 6 pages from 0xffffffff807b0cfc
pmm_alloc(0xc00000): found space for 6 pages at 0x41800000
map_phys_addr():  0x40c00000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40c00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1100 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40e00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1110 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
map_phys_addr():  0x41800000 -> 0x20000000 | 6 pages 
idx for VA: 0x20000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0010 0000 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[256] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81608000 = 0x41800087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0001 1000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff81608040 = 0x41a00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0001 1010 0000 0000 0000 1000 0111 
entry 2 @ 0xffffffff81608080 = 0x41c00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0001 1100 0000 0000 0000 1000 0111 
entry 3 @ 0xffffffff816080c0 = 0x41e00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0001 1110 0000 0000 0000 1000 0111 
entry 4 @ 0xffffffff81608100 = 0x42000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0010 0000 0000 0000 0000 1000 0111 
entry 5 @ 0xffffffff81608140 = 0x42200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0010 0010 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x20000000 
map_user_page_tables:  0x41800000 -> 0x20000000 | 6 pages 
idx for VA: 0x20000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0010 0000 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[256] p1[0] 
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
unmap_phys_addr():  unmapping 0x20000000  | 6 pages 
idx for VA: 0x20000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0010 0000 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[256] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x20000000 
task 5 has file len='12408292' mmaped at va 0x20000000 pa 0x41800000 size 12288 kb
invalidated: 0x20000000 
mmaped that shitwad loaded at 20000000
init doom @ 2376
calling doom main!
                           Doom Generic 0.1Z_Init: Init zone memory allocation daemon. 
expanding heap for task 5 [6291456]
pmm_alloc(0x600000): found space for 3 pages at 0x42600000
map_phys_addr():  0x40c00000 -> 0x400000 | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bc4c  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40c00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1100 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40e00087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 1110 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
map_user_page_tables:  0x42600000 -> 0xc00000 | 3 pages 
idx for VA: 0xc00000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[6] p1[0] 
unmap_phys_addr():  unmapping 0x400000  | 2 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
expanded heap for task 5:
        pa 0x41200000 va0x800000 size 10240 kb 
 cr3 to restore: 0x40ffd000 
invalidated: 0xc00000 
zone memory: , 0xa80000 allocated for zone
Using . for configuration and saves
V_Init: allocate screens.
M_LoadDefaults: Load system defaults.
M_LoadDefaults: Binding Variables
Bound Variables
M_LoadDefaults: Loaded
W_Init: Init WADfiles.
 adding DOOM.WAD
opened our wad 'file' 20000000we are loading WAD

reading WAD 0 (size 12) addr 20000000, end 20bd55e4
We got an IWAD ! 0xa800a8

reading WAD 12371396 (size 36896) addr 20bcc5c4, end 20bd55e4
 [fbNm IMPXA1 ]  [fbNm ETTNA1 ]  [fbNm AGRDA1 ]  [fbNm E4M1 ]  [fbNm dmenupic ] Using ./.savegame/ for savegames
===========================================================================
                           The Ultimate DOOM===========================================================================
 Doom Generic is free software, covered by the GNU General Public
 License.  There is NO warranty; not even for MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. You are welcome to change and distribute
 copies under certain conditions. See the source for more information.
===========================================================================
I_Init: Setting up machine state.
D_ConnectNetGame() 
Skipping Checksum 
InitConnectData(OK)
Almost past setup
M_Init: Init miscellaneous info.
R_Init: Init DOOM refresh daemon !!!! .. we have 351 appatches
.....textures [ok]flats [ok]............sprites [ok].. .. .. .. .. .. R_Init().. done!  

P_Init: Init Playloop state.
S_Init: Setting up sound.
D_CheckNetGame: Checking network game status.
 ... StartNetGame(1)... Emulating the behavior of the 'Ultimate Doom' executable.
HU_Init: Setting up heads up display.
 loading hud font... init HUD okay!
ST_Init: Init status bar.
manual override for PLAYPAL
StUnloadLoadGFX end

 Doom Loaded! 
trt 
DoomSetWindow: The Ultimate DOOM 
I_InitGraphics: framebuffer: x_res: 1024, y_res: 640, x_virtual: 1024, y_virtual: 640, bpp: 32
I_InitGraphics: framebuffer: RGBA: 8888, red_off: 16, green_off: 8, blue_off: 0, transp_off: 24
I_InitGraphics: DOOM screen size: w x h: 320 x 200
I_InitGraphics: Auto-scaling factor: 3
manual override for PLAYPAL
no frame buffer set?task 5 exited with code: 1
found task usermode pointing to del task doomos
set newest task to other as we were it, now usermode
remove_current_task(): woke up parent (4) of ending task (5)...
old parent pid = 4
DOOM EXITED
usr@os> yieldingq 
quitting
shutting down via QEMU method
