using Serial COM1 for debug out 
boot start
registered interupt handler for [33] at 0xffffffff80211f0e
registered interupt handler for [32] at 0xffffffff80211b8a
registered interupt handler for [105] at 0xffffffff8020d8ad
==init GDT, TSS==
gdt ptr = 0xffffffff80215000, tss ptr = 0xffffffff80215028 tss - gdt = 0x28
stack top = 0xffffffff8021e000 end = 0xffffffff8021a000 size = 0x4000
copied GDT tss to 0xffffffff80218de8
==Reloaded GDT, Loaded TSS==
interupts initialized
==boot initial phase complete==

CPUID available = YES
==Parsing Multiboot2 Header==
Unhandled Multiboot Tag: 10
Found Multiboot Module at 0x22c000. Total: 1
Unhandled Multiboot Tag: 9
Unhandled Multiboot Tag: 5
found VBE
fb @ 0xfc000000 [7 kb] [1920x1080] 7680p/32bpp 
===MULTIBOOT_TAG_TYPE_ACPI_OLD===
==parsed mb2 header==
boot info: BIOS [GRUB 2.13] cmdline='dbg=1 serial=1 hackz=1337' kernel_base=0x200000

==PMM Init==
Available Memory Region [0]:{ @0x0 - 0x9fc00 } size 0x9fc00 [0 MiB] 
Available Memory Region [3]:{ @0x100000 - 0xbffe0000 } size 0xbfee0000 [3070 MiB] 
Available Memory Region [6]:{ @0x100000000 - 0x140000000 } size 0x40000000 [1024 MiB] 
Total Memory:
    4193791 KiB  /  4095 MiB  /  3 GiB
 Total Pages: 2047 

for region 0x100000 - 0xbffe0000 there are 1535 pages (r 896 kb) to set free
aligned start 0x200000 - aligned end 0xbfe00000 (1 1) 
for region 0x100000000 - 0x140000000 there are 512 pages (r 0 kb) to set free
marking from kernel phys start 0x200000 to kernel phys end 0x22c000 as used
mark region used: 0x200000 - 0x22c000
marking from 0x200000 - 0x400000 as used, total pages = 1
mark region used: 0x0 - 0xe2c000
marking from 0x0 - 0xe58000 as used, total pages = 7
==PMM End==
mark region used: 0x22c000 - 0x1711f91
marking from 0x200000 - 0x17cbf22 as used, total pages = 10
==init paging==
mark region used: 0xfc000000 - 0xfc400000
marking from 0xfc000000 - 0xfc400000 as used, total pages = 2
unmapping initial identity
palloc_init()
pmm_kalloc(0x400000): found space for 2 pages at 0x1600000
map_phys_addr():  0x1600000 -> 0xffffffff81600000 | 2 pages 
idx for VA: 0xffffffff81600000 [0b1111 1111 1111 1111 1111 1111 1111 1111 1000 0001 0110 0000 0000 0000 0000 0000 ] 
 p4[511] p3[510] p2[11] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x224000
initial p3 = 0xffffffff80224000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bb0e  
we have: p3 = 0xffffffff80224000 p2 = 0x223000 
making p3 virtual: now 0xffffffff80224000 
making p2 virtual: now 0xffffffff80224000 
entry 0 @ 0xffffffff802232c0 = 0x1600083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff80223300 = 0x1800083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffffff81600000 
page allocator ready at 0xffffffff81600000
mapping framebuffer 0xfc000000 to 0xfc000000
map_phys_addr():  0xfc000000 -> 0xfc000000 | 4 pages 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[3] p2[480] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
initial p3 = 0x0 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bb0e  
alloc new page table at 0x1600000, virtual 0xffffffff81600000, index now 1 
alloc new page table at 0x1601000, virtual 0xffffffff81601000, index now 2 
made new: **p3 = 0x1600000 p2 = 0x1601000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0000 0000 0000 0111  
we have: p3 = 0x1600000 p2 = 0x1601000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81608800 = 0xfc000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff81608840 = 0xfc200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0010 0000 0000 0000 1000 0111 
entry 2 @ 0xffffffff81608880 = 0xfc400087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0100 0000 0000 0000 1000 0111 
entry 3 @ 0xffffffff816088c0 = 0xfc600087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0110 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0xfc000000 
init_heap()
pmm_kalloc(0x800000): found space for 4 pages at 0x1c00000
map_phys_addr():  0x1c00000 -> 0xffffbeefed000000 | 4 pages 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
 p4[381] p3[447] p2[360] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
initial p3 = 0x0 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bb0e  
alloc new page table at 0x1602000, virtual 0xffffffff81602000, index now 3 
alloc new page table at 0x1603000, virtual 0xffffffff81603000, index now 4 
made new: **p3 = 0x1602000 p2 = 0x1603000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0010 0000 0000 0111  
we have: p3 = 0x1602000 p2 = 0x1603000 
making p3 virtual: now 0xffffffff81602000 
making p2 virtual: now 0xffffffff81602000 
entry 0 @ 0xffffffff81608a00 = 0x1c00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1100 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff81608a40 = 0x1e00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1110 0000 0000 0000 1000 0011 
entry 2 @ 0xffffffff81608a80 = 0x2000083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0010 0000 0000 0000 0000 1000 0011 
entry 3 @ 0xffffffff81608ac0 = 0x2200083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0010 0010 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffbeefed000000 
bmap [ 0xffffbeefed000000 ] size=0 
max size = 262130 max_size_bytes = 0x200000 
==paging init ok==
skipping acpi

==MEM INIT OK==
enabled interupts.
==boot second phase complete==
making new block at 0xffffbeefed200000 size=94 /  footer @ 0xffffbeefed200052 
adding to alloc map, prev. # allocs = 0 
 added to alloc map, new # allocs = 1 
freeing block at 0xffffbeefed200000 / block_size=81 
block freed, size of allocs = 1 
loading initial ramdisk... 
===initrd: loading 21913489 bytes from 0x22c000===
initrd validated; contains 21909532 bytes of files!
we found no space to fit size 0x14e4, making new block at 0xffffbeefed20005e size=5373 /  footer @ 0xffffbeefed20154f 
adding to alloc map, prev. # allocs = 1 
 added to alloc map, new # allocs = 2 
we found no space to fit size 0x5aa, making new block at 0xffffbeefed20155b size=1475 /  footer @ 0xffffbeefed201b12 
adding to alloc map, prev. # allocs = 2 
 added to alloc map, new # allocs = 3 
added dir node mod 
added dir node local 
added dir node libnest 
added dir node lib 
added dir node usr 
added dir node books 
added dir node etc 
added dir node birds 
added dir node bin 
added file node ulysses.txt 
added file node LICENSE.txt 
added file node initrd.txt 
added file node etcetera.txt 
added file node DOOM95.WAD 
added file node init 
added file node ls 
added file node DOOM.WAD 
added file node usermode 
added file node doomos 
added file node loco.txt 
added file node usrlocal.txt 
added file node libd.so 
added file node imaginehavingalongfilenamewellyoudonthavetoanymore.txt 
added file node greenland.bmp 
added file node birdnest.nice 
added file node testcase.txt 
==initrd load success!== 

file init is valid elf64. loading..
phdr load  vaddr = 0x400000, aligned to 0x1000, X  R  
phdr load  vaddr = 0x405000, aligned to 0x1000,  W R  
lowest vaddr 0x400000 highest vaddr 0x405ac0, size 0x200000
pmm_alloc(0x600000): found space for 3 pages at 0x40000000
map_phys_addr():  0x40000000 -> 0x400000 | 3 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bb0e  
alloc new page table at 0x1604000, virtual 0xffffffff81604000, index now 5 
made new: p2
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0010 0000 0000 0000 1000 0111 
entry 2 @ 0xffffffff81604100 = 0x40400087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0100 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
allocated user pages: [phys address] =  p4 0x405fd000 p3 0x405fe000 p2 0x405ff000
 [virt] vstart = 0x400000 vend = 0xa00000, size palign 0x200000 size total 0x600000
map_user_page_tables:  0x40000000 -> 0x400000 | 3 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
kp4 phys = 0x220000
kp4 virt = 0xffffffff80220000
copying kp4 at idx 511 (contents 0x224023) to user p4
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
 p4[381] p3[447] p2[360] p1[0] 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
 p4[0] p3[3] p2[480] p1[0] 
usr stack @ 0x9fcf00, 0x405ae0 size = 6109 kb
copying header 0x400000 to 0x400000. fs= 0x4e18 ms = 0x4e18
copying header 0x405000 to 0x405000. fs= 0x970 ms = 0xac0
unmap_phys_addr():  unmapping 0x400000  | 3 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
loaded ELF: init [23232 kb]
 usr entry = 0x4000c0 usr phys = 0x40000000 usr lo 0x400000 usr rsp 0x9fcf00, usr cr3 = 0x405fd000
we found no space to fit size 0x1000, making new block at 0xffffbeefed201b1e size=4121 /  footer @ 0xffffbeefed202b2b 
adding to alloc map, prev. # allocs = 3 
 added to alloc map, new # allocs = 4 

=== stdout init @ 0xffffbeefed201b2b size 4096 idx 0  ready = 1 ===
==GFX INIT==/n
Graphics Init 1920 x 1080 x 32 ready = 1 
pmm_alloc(0x2000020): found space for 17 pages at 0x40800000
tasking init

we found no space to fit size 0x2000, making new block at 0xffffbeefed202b37 size=8217 /  footer @ 0xffffbeefed204b44 
adding to alloc map, prev. # allocs = 4 
 added to alloc map, new # allocs = 5 
stack  0xffffbeefed204a26 isn't aligned! repairing to = 0xffffbeefed204a20 
create_task task_kmain pid 0 rip 0xffffffff80201787 !
added initial task task_kmain pid 0 !
adding task task_drawstdout, pid_last = 1 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed204b50 size=8217 /  footer @ 0xffffbeefed206b5d 
adding to alloc map, prev. # allocs = 5 
 added to alloc map, new # allocs = 6 
stack  0xffffbeefed206a3f isn't aligned! repairing to = 0xffffbeefed206a30 
create_task task_drawstdout pid 1 rip 0xffffffff80201982 !
scheduler: added task task_drawstdout, pid = 1 !
adding task task_exit_test, pid_last = 2 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed206b69 size=8217 /  footer @ 0xffffbeefed208b76 
adding to alloc map, prev. # allocs = 6 
 added to alloc map, new # allocs = 7 
stack  0xffffbeefed208a58 isn't aligned! repairing to = 0xffffbeefed208a50 
create_task task_exit_test pid 2 rip 0xffffffff80201a90 !
scheduler: added task task_exit_test, pid = 2 !
adding task task_yield_test, pid_last = 3 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed208b82 size=8217 /  footer @ 0xffffbeefed20ab8f 
adding to alloc map, prev. # allocs = 7 
 added to alloc map, new # allocs = 8 
stack  0xffffbeefed20aa71 isn't aligned! repairing to = 0xffffbeefed20aa70 
create_task task_yield_test pid 3 rip 0xffffffff80201ac1 !
scheduler: added task task_yield_test, pid = 3 !
adding USER task usermode, pid_last = 4 !
we found no space to fit size 0x2000, making new block at 0xffffbeefed20ab9b size=8217 /  footer @ 0xffffbeefed20cba8 
adding to alloc map, prev. # allocs = 8 
 added to alloc map, new # allocs = 9 
stack  0xffffbeefed20ca8a isn't aligned! repairing to = 0xffffbeefed20ca80 
create_task usermode pid 4 rip 0x4000c0 !
we found no space to fit size 0x70, making new block at 0xffffbeefed20cbb4 size=137 /  footer @ 0xffffbeefed20cc31 
adding to alloc map, prev. # allocs = 9 
 added to alloc map, new # allocs = 10 
scheduler: added USER task usermode, pid = 4 !
randos up 
starting first task task_kmain
starting task task_kmain
task draw timer 
task draw test 
task exit test 
task 2 exited with code: 0
found task task_drawstdout pointing to del task task_exit_test
old parent pid = 65535
yield testallocated a heap for task 4
pmm_alloc(0x400000): found space for 2 pages at 0x42c00000
map_phys_addr():  0x40000000 -> 0x400000 | 3 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0x220000
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
initial p3 = 0xffffffff81600000 p4 = 0xffffffff80220000, p3_phys = 0xffffffff8020bb0e  
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p3 virtual: now 0xffffffff81600000 
making p2 virtual: now 0xffffffff81600000 
entry 0 @ 0xffffffff81604080 = 0x40000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 1000 0111 
entry 1 @ 0xffffffff816040c0 = 0x40200087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0010 0000 0000 0000 1000 0111 
entry 2 @ 0xffffffff81604100 = 0x40400087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0100 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
map_user_page_tables:  0x42c00000 -> 0xa00000 | 2 pages 
idx for VA: 0xa00000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1010 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[5] p1[0] 
unmap_phys_addr():  unmapping 0x400000  | 3 pages 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
 p4[0] p3[0] p2[2] p1[0] 
p4 = 0xffffffff80220000
p4->[p3ind]=0x1600000
we have: p3 = 0xffffffff81600000 p2 = 0x1604000 
making p2 virtual: now 0xffffffff81600000 
==flushed TLB==
invalidated: 0x400000 
allocated a heap for task 4:
        pa 0x42c00000 va0xa00000 size 4096 kb 
 cr3 to restore: 0x405fd000 
==flushed TLB==
invalidated: 0xa00000 
I am a user task hard at work
please mr kernel give me cpu time
{ [1920x1080@4] 0xfc000000/7680p }

usr@os> yieldingyieldingyielding