hello from the higher side
hey
boot start
registered interupt handler for [33] at 0xffffffff8020dd1c
registered interupt handler for [32] at 0xffffffff8020daf2
registered interupt handler for [105] at 0xffffffff8020c0e7
==init GDT, TSS==
gdt ptr = 0xffffffff80211000, tss ptr = 0xffffffff80211028 tss - gdt = 0x28
stack top = 0xffffffff80219000 end = 0xffffffff80215000 size = 0x4000
copied GDT tss to 0xffffffff802141b0
==Reloaded GDT, Loaded TSS==
interupts initialized
==boot initial phase complete==

CPUID available = YES
==Parsing Multiboot2 Header==
Unhandled Multiboot Tag: 10
Found Multiboot Module at 0x227000. Total: 1
Unhandled Multiboot Tag: 9
Unhandled Multiboot Tag: 5
found VBE
fb @ 0xfc000000 h= 768 p= 4096 
===MULTIBOOT_TAG_TYPE_ACPI_OLD===
==parsed mb2 header==
boot info: BIOS [GRUB 2.12] cmdline='dbg=1 serial=1 hackz=1337' kernel_base=0x200000

==PMM Init==
Available Memory Region [0]:{ @0x0 - 0x9fc00 } size 0x9fc00 [0 MiB] 
Available Memory Region [3]:{ @0x100000 - 0xbffe0000 } size 0xbfee0000 [3070 MiB] 
Available Memory Region [7]:{ @0x100000000 - 0x240000000 } size 0x140000000 [5120 MiB] 
Total Memory:
    8388095 KiB  /  8191 MiB  /  7 GiB
 Total Pages: 4095 

for region 0x0 - 0x9fc00 there are 0 pages (r 639 kb) to set free
for region 0x100000 - 0xbffe0000 there are 1535 pages (r 896 kb) to set free
aligned start 0x200000 - aligned end 0xbfe00000 (1 1) 
for region 0x100000000 - 0x240000000 there are 2560 pages (r 0 kb) to set free
marking from kernel phys start 0x200000 to kernel phys end 0x227000 as used
mark region used: 0x200000 - 0x227000
marking from 0x200000 - 0x400000 as used, total pages = 1
mark region used: 0x0 - 0xe27000
marking from 0x0 - 0xe4e000 as used, total pages = 7
==PMM End==
mark region used: 0x227000 - 0x1083ebc
marking from 0x200000 - 0x10b9d78 as used, total pages = 7
==init paging==
mark region used: 0xfc000000 - 0xfc300000
marking from 0xfc000000 - 0xfc400000 as used, total pages = 2
unmapping initial identity
palloc_init()
pmm_kalloc(0x400000): found space for 2 pages at 0x1000000
map_phys_addr():  0x1000000 -> 0xffffffff81000000 | 2 pages 
Extended VA: : 0xffffffff81000000 
idx for VA: 0xffffffff81000000 [0b1111 1111 1111 1111 1111 1111 1111 1111 1000 0001 0000 0000 0000 0000 0000 0000 ] 
p4 idx : 511 
p3 idx : 510 
p2 idx : 8 
p1 idx : 0 
 p4 =511  p3 = 510 p2 = 8 p1 = 0 
 p4 =511  p3 = 510 p2 = 8 p1 = 0 
p4 = 0x21b000
p4 = 0xffffffff8021b000
p4->[p3ind]=0x21f000
initial p3 = 0xffffffff8021f000 p4 = 0xffffffff8021b000, p3_phys = 0xffffffff8020abc8  
we have: p3 = 0xffffffff8021f000 p2 = 0x21e000 
making p3 virtual: now 0xffffffff8021f000 
making p2 virtual: now 0xffffffff8021f000 
entry 0 @ 0xffffffff8021e200 = 0x1000083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0000 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff8021e240 = 0x1200083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0010 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffffff81000000 
page allocator ready at 0xffffffff81000000
mapping framebuffer 0xfc000000 to 0xfc000000
map_phys_addr():  0xfc000000 -> 0xfc000000 | 2 pages 
Extended VA: : 0xfc000000 
idx for VA: 0xfc000000 [0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 0000 0000 ] 
p4 idx : 0 
p3 idx : 3 
p2 idx : 480 
p1 idx : 0 
 p4 =0  p3 = 3 p2 = 480 p1 = 0 
 p4 =0  p3 = 3 p2 = 480 p1 = 0 
p4 = 0x21b000
p4 = 0xffffffff8021b000
initial p3 = 0x0 p4 = 0xffffffff8021b000, p3_phys = 0xffffffff8020abc8  
alloc new page table at 0x1000000, virtual 0xffffffff81000000, index now 1 
alloc new page table at 0x1001000, virtual 0xffffffff81001000, index now 2 
made new: **p3 = 0x1000000 p2 = 0x1001000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0000 0000 0000 0000 0000 0111  
we have: p3 = 0x1000000 p2 = 0x1001000 
making p3 virtual: now 0xffffffff81000000 
making p2 virtual: now 0xffffffff81000000 
entry 0 @ 0xffffffff81008800 = 0xfc000083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0000 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff81008840 = 0xfc200083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1100 0010 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xfc000000 
init_heap()
pmm_kalloc(0x800000): found space for 4 pages at 0x1600000
map_phys_addr():  0x1600000 -> 0xffffbeefed000000 | 4 pages 
Extended VA: : 0xffffbeefed000000 
idx for VA: 0xffffbeefed000000 [0b1111 1111 1111 1111 1011 1110 1110 1111 1110 1101 0000 0000 0000 0000 0000 0000 ] 
p4 idx : 381 
p3 idx : 447 
p2 idx : 360 
p1 idx : 0 
 p4 =381  p3 = 447 p2 = 360 p1 = 0 
 p4 =381  p3 = 447 p2 = 360 p1 = 0 
p4 = 0x21b000
p4 = 0xffffffff8021b000
initial p3 = 0x0 p4 = 0xffffffff8021b000, p3_phys = 0xffffffff8020abc8  
alloc new page table at 0x1002000, virtual 0xffffffff81002000, index now 3 
alloc new page table at 0x1003000, virtual 0xffffffff81003000, index now 4 
made new: **p3 = 0x1002000 p2 = 0x1003000 entry = 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0000 0000 0010 0000 0000 0111  
we have: p3 = 0x1002000 p2 = 0x1003000 
making p3 virtual: now 0xffffffff81002000 
making p2 virtual: now 0xffffffff81002000 
entry 0 @ 0xffffffff81008a00 = 0x1600083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 0110 0000 0000 0000 1000 0011 
entry 1 @ 0xffffffff81008a40 = 0x1800083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1000 0000 0000 0000 1000 0011 
entry 2 @ 0xffffffff81008a80 = 0x1a00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1010 0000 0000 0000 1000 0011 
entry 3 @ 0xffffffff81008ac0 = 0x1c00083 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0001 1100 0000 0000 0000 1000 0011 
==flushed TLB==
invalidated: 0xffffbeefed000000 
bmap [ 0xffffbeefed000000 ] size=0 
max size = 262130 max_size_bytes = 0x200000 
==paging init ok==
skipping acpi

==MEM INIT OK==
enabled interupts.
==boot second phase complete==
making new block at 0xffffbeefed200000 size=94 /  footer @ 0xffffbeefed200052 
adding to alloc map, prev. # allocs = 0 
 added to alloc map, new # allocs = 1 
===initrd: loading 15060668 bytes from 0x227000===
initrd validated; contains 15057322 bytes of files!
we found no space to fit size 0x11e8, making new block at 0xffffbeefed20005e size=4609 /  footer @ 0xffffbeefed201253 
adding to alloc map, prev. # allocs = 1 
 added to alloc map, new # allocs = 2 
we found no space to fit size 0x519, making new block at 0xffffbeefed20125f size=1330 /  footer @ 0xffffbeefed201785 
adding to alloc map, prev. # allocs = 2 
 added to alloc map, new # allocs = 3 
added dir node local 
added dir node libnest 
added dir node lib 
added dir node usr 
added dir node books 
added dir node etc 
added dir node birds 
added dir node bin 
added file node ulysses.txt 
added file node LICENSE.txt 
added file node initrd.txt 
added file node test.txt 
added file node manyfiles.txt 
added file node etsee.file 
added file node romanempire.txt 
added file node usermode 
added file node loco.txt 
added file node usrlocal.txt 
added file node imaginehavingalongfilenamewellyoudonthavetoanymore.txt 
added file node greenland.bmp 
added file node birdnest.nice 
added file node testcase.txt 
==initrd load success!== 

file usermode is valid elf64. loading..
phdr load  vaddr = 0x400000, aligned to 0x1000,   R  
phdr load  vaddr = 0x401000, aligned to 0x1000, X  R  
phdr load  vaddr = 0x402000, aligned to 0x1000,   R  
lowest vaddr 0x400000 highest vaddr 0x4020d4, size 0x200000
pmm_alloc(0x200000): found space for 1 pages at 0x40000000
map_phys_addr():  0x40000000 -> 0x400000 | 1 pages 
Extended VA: : 0x400000 
idx for VA: 0x400000 [0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 ] 
p4 idx : 0 
p3 idx : 0 
p2 idx : 2 
p1 idx : 0 
 p4 =0  p3 = 0 p2 = 2 p1 = 0 
 p4 =0  p3 = 0 p2 = 2 p1 = 0 
p4 = 0x21b000
p4 = 0xffffffff8021b000
p4->[p3ind]=0x1000000
initial p3 = 0xffffffff81000000 p4 = 0xffffffff8021b000, p3_phys = 0xffffffff8020abc8  
alloc new page table at 0x1004000, virtual 0xffffffff81004000, index now 5 
made new: p2
we have: p3 = 0xffffffff81000000 p2 = 0x1004000 
making p3 virtual: now 0xffffffff81000000 
making p2 virtual: now 0xffffffff81000000 
entry 0 @ 0xffffffff81004080 = 0x40000087 
 0b0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 1000 0111 
==flushed TLB==
invalidated: 0x400000 
copying header 0x400000 to 0x400000. fs= 0x254 ms = 0x254
copying header 0x401000 to 0x401000. fs= 0x96 ms = 0x96
copying header 0x402000 to 0x402000. fs= 0xd4 ms = 0xd4
 usr entry = 0x40107b usr phys = 0x40000000 usr lo 0x400000 usr rsp 0x5fffc0
we found no space to fit size 0x1000, making new block at 0xffffbeefed201791 size=4121 /  footer @ 0xffffbeefed20279e 
adding to alloc map, prev. # allocs = 3 
 added to alloc map, new # allocs = 4 

=== stdout init @ 0xffffbeefed20179e size 4096 idx 0  ready = 1 ===
Graphics Init 1024 x 768 x 32 ready = 1 
hello from user mode.hello from user mode.please mr kernel can I print/nplease mr kernel can I print
=== GPF ===
Error: 0 
rbp 0x5fffb8 
==============
===isr[0xd] err{0x0}====
err_code = 0x0
rbp = 0x5fffb8
rip = 0x401093
ss:rsp = 0x5fffb8
cs = 0x1b
rflags = 0x10202
ds = 0x1b
ss = 0x23
rax = 0xcafebabe
rbx = 0x211000
rcx = 0x0
rdx = 0x402016
rdi = 0x402016
rsi = 0x5fffc0
r8 = 0xffffffff8020e187
r9 = 0x1
r10 = 0xffffffff8020acec
r11 = 0x0
r12 = 0x0
r13 = 0x0
r14 = 0x0
r15 = 0x0

=== GPF ===
Error: 0 
rbp 0x5fffb8 
==============
===isr[0xd] err{0x0}====
err_code = 0x0
rbp = 0x5fffb8
rip = 0x401093
ss:rsp = 0x5fffb8
cs = 0x1b
rflags = 0x10202
ds = 0x1b
ss = 0x23
rax = 0xcafebabe
rbx = 0x211000
rcx = 0x0
rdx = 0x402016
rdi = 0x402016
rsi = 0x5fffc0
r8 = 0xffffffff8020e187
r9 = 0x1
r10 = 0xffffffff8020acec
r11 = 0x0
r12 = 0x0
r13 = 0x0
r14 = 0x0
r15 = 0x0
