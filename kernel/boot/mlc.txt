

lgdt64: 
    dq 0 ;null segment
.lcode: equ $ - lgdt64 ;0x8
    dq (1<<44) | (1<<47) | (1<<41) | (1<<43) | (1<<53)


.ldata: equ $ - lgdt64 ;0x10
    dq (1<<44) | (1<<47) | (1<<41)
    dq 0 ;usrc
    dq 0 ;usrd
;tss
   dq 0;
   dq 0;

; GTDR
.lpointer:
    dw .lpointer - lgdt64 - 1
    dq lgdt64

;setup high mode
   mov eax, p3_higher
    or eax, 0b11 ;
    mov dword [p4_table + 8 * 511], eax

    mov eax, p2_higher
    or eax, 0b11
    mov dword [p3_higher + 8 * 510], eax


    mov ecx, 0         ; counter variable
.map_high_table:
    mov eax, PAGE_SIZE
    mul ecx
    or eax, 0b10000011
    mov [p2_higher + ecx * 8], eax;

    inc ecx
    cmp ecx, 32 ; map 32 * 2mib of memory = 64mib
    jne .map_high_table


align 8
address_tag_start:
    dw 2 ; type
    dw 0 ; flags
    dd address_tag_end - address_tag_start
    dd mb_header_start - KERNEL_VMA; header addr
    dd (_start - KERNEL_VMA); load addr
    dd (_end - KERNEL_VMA) ; data end
    dd (_edata - KERNEL_VMA) ; bss end
    dd (start - KERNEL_VMA) ; entry pt
address_tag_end: ;is this in the right spot????
align 8
entry_tag_start:
    dw 3 ; type
    dw 0 ; not optional
    dd entry_tag_end - entry_tag_start
    dd (start - KERNEL_VMA)
entry_tag_end:
